바벨을 실행하는 여러가지 방법
  @babel/cli
  webpack - babel-loader
  @babel/core
  @babel/register

npm i
  @babel/core 
  @babel/cli 
  @babel/plugin-transform-arrow-functions 
  @babel/plugin-transform-template-literals 
  @babel/preset-react

npx babel src/01.js --presets=@babel/preset-react --plugins=@babel/plugin-transform-arrow-functions,@babel/plugin-transform-template-literals

babel.config.js
  const presets = ['@babel/preset-react'];
  const plugins = ['@babel/plugin-transform-arrow-functions', '@babel/plugin-transform-template-literals'];
  module.exports = { presets, plugins };

npx babel src/01.js

npx babel src/01.js --out-file dist01/01.js
npx babel src --out-dir dist01

npm i
  webpack webpack-cli babel-loader

webpack.config.js
  const path = require('path');
  module.exports = {
    entry: './src/code.js',
    output: {
      path: path.resolve(__dirname, 'dist'),
      filename: 'code.bundle.js',
    },
    module: {
      rules: [{ test: /\.js$/, use: 'babel-loader' }],
    },
    optimization: { minimizer: [] },
  };

  npx webpack

@babel/core
runBabel.js
  const babel = require('@babel/core');
  const fs = require('fs');
  const filename = './src/01.js';
  const source = fs.readFileSync(filename, 'utf8');
  const presets = ['@babel/preset-react'];
  const plugins = ['@babel/plugin-transform-arrow-functions', '@babel/plugin-transform-template-literals'];
  const { code } = babel.transformAsync(source, {
    filename,
    presets,
    plugins,
    configFile: false, // babel.config.js 설정파일을 사용하지 않도록 한다.
  });
  console.log(code);

  node runBabel.js

  파싱단계 : 입력된 코드로부터 AST(abstract syntax tree)를 생성한다.
  변환단계 : AST를 원하는 형태로 변환한다.
  생성단계 : AST를 코드로 출력한다.

맥 : NODE_ENV=production npx babel ./src/example-env
윈도우 : set NODE_ENV=production && npx babel ./src/example-env

폴리필 : 런타임에 기능을 주입하는 것을 말한다. 런타임에 기능이 존재하는지 검사해서 기능이 없는 경우에만 주입하는 것을 말한다.
@babel/preset-env : 프리셋은 실행 환경에 대한 정보를 설정해주면 자동으로 필요한 기능을 주입해준다.

astexplorer
AST
  각 노드는 type 속성이 있다.
  변수 선언은 VariableDeclarator이다.
  개발자가 만들어낸 각종 이름은 Identifier 타입으로 만들어진다.
  사칙연산은 BinaryExression 타입으로 만들어진다.

바벨 플러그인 기본구조
  const v1 = a + b;
  module.exports = function({ types: t }) {
    const node = t.BinaryExpression('+', t.Identifier('a'), t.Identifier('b'));
    console.log('isBinaryExpression:', t.isBinaryExpression(node));
    return {};
  }